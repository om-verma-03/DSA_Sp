class Solution {
public:
    void NSR(vector<int>& heights,vector<int> &right){    //Next Smaller to right
        stack<pair<int,int>> st;
        int pseudoIndex = heights.size();
        for(int i=heights.size()-1;i>=0;i--){
            if(st.size() == 0){
                right.push_back(pseudoIndex);
            }
            else if(st.size() >0 && st.top().first<heights[i]){
                right.push_back(st.top().second);
            }
            else if(st.size() >0 && st.top().first >=heights[i]){
                while(st.size()>0 && st.top().first >=heights[i]){
                    st.pop();
                }
                if(st.size() == 0){
                    right.push_back(pseudoIndex);
                }
                else{
                    right.push_back(st.top().second);
                }
            }
            st.push({heights[i],i});
        }
        reverse(right.begin(),right.end());
    }
    
    void NSL(vector<int>& heights,vector<int> &left){   //Next Smaller to left
        stack<pair<int,int>> st;
        int pseudoIndex = -1;
        for(int i=0;i<heights.size();i++){
            if(st.size() == 0){
                left.push_back(pseudoIndex);
            }
            else if(st.size() >0 && st.top().first<heights[i]){
                left.push_back(st.top().second);
            }
            else if(st.size() >0 && st.top().first >=heights[i]){
                while(st.size()>0 && st.top().first >=heights[i]){
                    st.pop();
                }
                if(st.size() == 0){
                    left.push_back(pseudoIndex);
                }
                else{
                    left.push_back(st.top().second);
                }
            }
            st.push({heights[i],i});
        }
    }
    int largestRectangleArea(vector<int>& heights) {
       vector<int> right;
       vector<int> left;
       
       NSR(heights,right);
       NSL(heights,left);
       
       int width[heights.size()];
       
       for(int i=0;i<left.size();i++){
           width[i] = right[i]-left[i]-1;
       }
       
       int area[heights.size()];
       for(int i=0;i<heights.size();i++){
           area[i] = heights[i]*width[i];
       }
       int sol = *max_element(area,area+heights.size());
       return sol;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        vector<vector<int>> rec(matrix.size(),vector<int>(matrix[0].size(),0));

        for(int i=0;i<matrix.size();i++){
            for(int j=0;j<matrix[i].size();j++){
                if(matrix[i][j] == '1'){
                    rec[i][j] = 1;
                }
            }
        }

        int area = largestRectangleArea(rec[0]);

        for(int i=1;i<matrix.size();i++){
            for(int j=0;j<matrix[i].size();j++){
                if(rec[i][j] == 1){
                    rec[i][j] += rec[i-1][j];
                }
                else{
                    rec[i][j] = 0;
                }
            }
            area = max(area,largestRectangleArea(rec[i]));
        }
        return area;
    }
};
