class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* curr = root;

        while(curr){
            //If left node is NULL,Visit it and go to the right node
            if(curr->left == NULL){
                ans.push_back(curr->val);
                curr = curr->right;
            }
            else{            //Left node is not NULL
                //Find the inorder Predecessor(Ek Left then Right Right.....)
                TreeNode* pre = curr->left;
                while(pre->right != curr && pre->right){    //Infinite loop me na fass jaye
                    pre = pre->right;
                }

                //If pred Right node is NULL,then Establish the connection with the curr node and then go left
                if(pre->right == NULL){
                    pre->right = curr;
                    curr = curr->left;
                }
                else{        //Left is alredy visited,then Remove the connection,visit the current,and go Right
                    pre->right = NULL;
                    ans.push_back(curr->val);
                    curr = curr->right;
                }
            }
        }
        return ans;
    }
};
