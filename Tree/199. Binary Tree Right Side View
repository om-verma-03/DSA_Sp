                                                        Way 1
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        map<int,int> mp;

        vector<int> ans;
        if(root == NULL){
            return ans;
        }
        queue<pair<TreeNode*,int>> que;
        que.push({root,0});

        while(!que.empty()){
            auto temp = que.front();
            que.pop();

            TreeNode* frontNode = temp.first;
            int lvl = temp.second;

            mp[lvl] = frontNode->val;

            if(frontNode->left){
                que.push({frontNode->left,lvl+1});
            }
            if(frontNode->right){
                que.push({frontNode->right,lvl+1});
            }
        }

        for(auto it: mp){
            ans.push_back(it.second);
        }
        return ans;
    }
};
                                                        Way 2
class Solution
{
    public:
    void solve(Node* root,vector<int> &ans,int level){
        //Base case
        if(root == NULL){
            return;
        }
    
        if(level == ans.size()){
            ans.push_back(root->data);
        }
        
        solve(root->right,ans,level+1);
        solve(root->left,ans,level+1);
    }
    vector<int> rightView(Node *root){
        vector<int> ans;
        solve(root,ans,0);
        return ans;
    }
};
