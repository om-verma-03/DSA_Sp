                                                            Way 1
void solve(Node* root,vector<int> &ans,int level){
    if(root == NULL){
        return;
    }

    if(level == ans.size()){
        ans.push_back(root->data);
    }
    solve(root->left,ans,level+1);
    solve(root->right,ans,level+1);
}
vector<int> leftView(Node *root)
{
   vector<int> ans;
   int level = 0;
   solve(root,ans,level);
   
   return ans;
}
                                                    //Way 2
vector<int> leftView(Node *root){
   map<int,int> mp;
   vector<int> ans;
   
   if(root == NULL){
       return ans;
   }
   
   queue<pair<Node*,int>> que;
   que.push({root,0});
   
   while(!que.empty()){
       auto temp = que.front();
       que.pop();
       
       Node* frontNode = temp.first;
       int lvl = temp.second;
       
       if(mp.find(lvl) == mp.end()){
           mp[lvl] = frontNode->data;
       }
       
       if(frontNode->left){
           que.push({frontNode->left,lvl+1});
       }
       if(frontNode->right){
           que.push({frontNode->right,lvl+1});
       }
   }
   
   for(auto it: mp){
       ans.push_back(it.second);
   }
   return ans;
}
