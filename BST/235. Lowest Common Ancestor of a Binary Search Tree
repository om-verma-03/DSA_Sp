class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL){
            return NULL;
        }

        if(p->val < root->val && q->val < root->val){
            return lowestCommonAncestor(root->left,p,q);
        }
        if(p->val > root->val && q->val > root->val){
            return lowestCommonAncestor(root->right,p,q);
        }
        return root;
    }
};
                                                              Way 2(Binary tree wala)
class Solution {
public:
    TreeNode* solve(TreeNode* root,TreeNode* p,TreeNode* q){
        if(root == NULL){
            return NULL;
        }

        if(root == p || root == q){
            return root;
        }

        TreeNode* left = solve(root->left,p,q);
        TreeNode* right = solve(root->right,p,q);

        if(left != NULL && right != NULL){
            return root;
        }
        else if(left != NULL && right == NULL){
            return left;
        }
        else{
            return right;
        }
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        return solve(root,p,q);
    }
};
