class Solution {
public:
    long long solve(vector<int>& coins,int amount,vector<int>& dp){   Top-Down(Memoization)
        if(amount == 0){
            return 0;
        }
        if(dp[amount] != -1){
            return dp[amount];
        }

        long long mini = INT_MAX;
        for(int i=0;i<coins.size();i++){
            if(amount-coins[i] >= 0){
                mini = min(mini,solve(coins,amount-coins[i],dp)+1);
            }
        }
        return dp[amount] = mini;
    }
    long long solve_tab(vector<int>& coins,int amount){           Bottom-Up(Tabulation)
        vector<int> dp(amount+1,0);

        for(int i=1;i<=amount;i++){
            long long mini = INT_MAX;
            for(int j=0;j<coins.size();j++){
                if(i-coins[j] >= 0){
                    mini = min(mini,dp[i-coins[j]]+1ll);
                }
            }
            dp[i] = mini;
        }
        return dp[amount];
    }
    int coinChange(vector<int>& coins, int amount) {
        // vector<int> dp(amount+1,-1);
        // int ans = solve(coins,amount,dp);
        int ans = solve_tab(coins,amount);
        if(ans == INT_MAX){
            return -1;
        }
        return ans;
    }
};
