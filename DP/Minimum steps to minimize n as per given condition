class Solution{

	public:
	int solve(int N,vector<int>& dp){
	    if(N == 1){
	        return 0;
	    }
	    if(dp[N] != -1){
	        return dp[N];
	    }
	    
	    int first=INT_MAX,second=INT_MAX,third=INT_MAX;
	    if(N%3 == 0){
	        first = solve(N/3,dp)+1;
	    }
	    if(N%2 == 0){
	        second = solve(N/2,dp)+1;
	    }
	    third = solve(N-1,dp)+1;
	    
	    return dp[N] = min(first,min(second,third));
	}
	int solve_tab(int N){
	    vector<int> dp(N+1,0);
	    
	    dp[1] = 0;
	    
	    for(int i=2;i<=N;i++){
	        int first=INT_MAX,second=INT_MAX,third=INT_MAX;
    	    if(i%3 == 0){
    	        first = dp[i/3]+1;
    	    }
    	    if(i%2 == 0){
    	        second = dp[i/2]+1;
    	    }
    	    third = dp[i-1]+1;
    	    
    	    dp[i] = min(first,min(second,third));
	    }
	    return dp[N];
	}
	int minSteps(int N) {
	   // vector<int> dp(N+1,-1);
	   // return solve(N,dp);
	   //return solve_tab(N);
	   return solve_tab_so(N);
	} 
};
