class Solution {
public:
    vector<int> neig = {-1,0,1};
    int solve(vector<vector<int>>& grid,int r,int c1,int c2,vector<vector<vector<int>>>& dp){
        if(r == grid.size()){
            return 0;
        }
        if(c1 < 0 || c1 >= grid[0].size() || c2 < 0 || c2 >= grid[0].size()){
            return -1e8;
        }
        if(dp[r][c1][c2] != -1){
            return dp[r][c1][c2];
        }

        int maxi = 0;

        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                if(c1 == c2){
                    maxi = max(maxi,grid[r][c1]+solve(grid,r+1,c1+neig[i],c2+neig[j],dp));
                }
                else{
                    maxi = max(maxi,grid[r][c1]+grid[r][c2]+solve(grid,r+1,c1+neig[i],c2+neig[j],dp));
                }
            }
        }
        return dp[r][c1][c2] = maxi;
    }
    int cherryPickup(vector<vector<int>>& grid){
        int m = grid[0].size();
        vector<vector<vector<int>>> dp(71,vector<vector<int>>(71,vector<int>(71,-1)));
        return solve(grid,0,0,m-1,dp);
    }
};
