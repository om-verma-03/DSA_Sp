class Solution{   
public:
    bool solve(vector<int>& arr,int ind,int target,vector<vector<int>>& dp){
        if(target == 0){
            return true;
        }
        if(ind >= arr.size()){
            return false;
        }
        if(dp[ind][target] != -1){
            return dp[ind][target];
        }
        
        bool take;
        if(target-arr[ind] >= 0){
            take = solve(arr,ind+1,target-arr[ind],dp);
        }
        bool notTake = solve(arr,ind+1,target,dp);
        
        return dp[ind][target] = take || notTake;
    }
    bool solve_tab(vector<int>& arr,int target){
        vector<vector<int>> dp(arr.size()+1,vector<int>(target+1,0));
        
        for(int i=0;i<arr.size();i++){
            dp[i][0] = true;
        }
        
        for(int i=arr.size()-1;i>=0;i--){
            for(int j=1;j<=target;j++){
                bool take;
                if(j-arr[i] >= 0){
                    take = solve(arr,i+1,j-arr[i],dp);
                }
                bool notTake = solve(arr,i+1,j,dp);
                
                dp[i][j] = take || notTake;
            }
        }
        return dp[0][target];
    }
    bool isSubsetSum(vector<int>arr, int sum){
        // vector<vector<int>> dp(arr.size()+1,vector<int>(sum+1,-1));
        // return solve(arr,0,sum,dp);
        return solve_tab(arr,sum);
    }
};
