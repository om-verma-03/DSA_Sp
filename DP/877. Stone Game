class Solution {
public:
    int solve(vector<int>& piles,int i,int j,vector<vector<int>>& dp){
        if(i > j){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        int x = piles[i] + min(solve(piles,i+2,j,dp),solve(piles,i+1,j-1,dp));
        int y = piles[j] + min(solve(piles,i+1,j-1,dp),solve(piles,i,j-2,dp));

        return dp[i][j] = max(x,y);
    }
    int solve_tab(vector<int>& piles){      //NOT WORKING
        vector<vector<int>> dp(piles.size()+2,vector<int>(piles.size()+2,0));

        for(int i=1;i<piles.size();i++){
            for(int j=piles.size()-1;j>=1;j--){
                // if(i > j){
                //     continue;
                // }
                int x = piles[i] + min(dp[i+2][j],dp[i+1][j-1]);
                int y = piles[j] + min(dp[i+1][j-1],dp[i][j-2]);

                dp[i][j] = max(x,y);
            }
        }
        return dp[0][piles.size()-1];
    }
    bool stoneGame(vector<int>& piles) {
        vector<vector<int>> dp(piles.size()+1,vector<int>(piles.size()+1,-1));
        // int Alice = solve(piles,0,piles.size()-1,dp);
        int Alice = solve_tab(piles);

        int total = 0;
        for(int i=0;i<piles.size();i++){
            total += piles[i];
        }

        int Bob = total-Alice;
        return Alice > Bob;
    }
};
