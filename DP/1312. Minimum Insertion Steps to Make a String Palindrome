class Solution {
public:
    int solve(string s1,string s2,int i,int j,vector<vector<int>>& dp){
        if(i >= s1.size()){
            return 0;
        }
        if(j >= s2.size()){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int op1 = 0,op2 = 0,op3 = 0;
        if(s1[i] == s2[j]){
            op1 = 1+solve(s1,s2,i+1,j+1,dp);
        }
        else{
            op2 = solve(s1,s2,i+1,j,dp);
            op3 = solve(s1,s2,i,j+1,dp);
        }

        return dp[i][j] = max(op1,max(op2,op3));
    }
    int solve_tab(string s1,string s2){
        int n = s1.size();

        vector<vector<int>> dp(n+1,vector<int>(n+1,0));

        for(int i=n-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                int op1 = 0,op2 = 0,op3 = 0;
                if(s1[i] == s2[j]){
                    op1 = 1+dp[i+1][j+1];
                }
                else{
                    op2 = dp[i+1][j];
                    op3 = dp[i][j+1];
                }

                dp[i][j] = max(op1,max(op2,op3));
            }
        }
        return dp[0][0];
    }
    int minInsertions(string s) {
        string t = s;
        reverse(t.begin(),t.end());

        // vector<vector<int>> dp(s.size()+1,vector<int>(s.size()+1,-1));
        // int lon = solve(s,t,0,0,dp);
        int lon = solve_tab(s,t);

        return s.size()-lon;
    }
};
