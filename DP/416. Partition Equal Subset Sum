class Solution {
public:
    bool solve(vector<int>& nums,int ind,int target,vector<vector<int>>& dp){
        if(target == 0){
            return 1;
        }
        if(target < 0 || ind >= nums.size()){
            return 0;
        }
        if(dp[ind][target] != -1){
            return dp[ind][target];
        }

        bool first = solve(nums,ind+1,target-nums[ind],dp);
        bool second = solve(nums,ind+1,target,dp);

        return dp[ind][target] = (first || second);        
    }
    bool solve_tab(vector<int>& nums,int target){
        int n = nums.size();
        vector<vector<int>> dp(n+1,vector<int>(target+1,0));

        for(int i=0;i<=n;i++){
            dp[i][0] = 1;
        }

        for(int i=n-1;i>=0;i--){
            for(int j=1;j<=target;j++){
                bool first = 0;
                if(j-nums[i] >= 0)
                    first = dp[i+1][j-nums[i]];
                bool second = dp[i+1][j];

                dp[i][j] = (first || second); 
            }
        }
        return dp[0][target];
    }
    bool solve_tab_so(vector<int>& nums,int target){
        int n = nums.size();
        vector<int> prev(target+1,0);
        vector<int> curr(target+1,0);

        prev[0] = 1;
        curr[0] = 1;

        for(int i=n-1;i>=0;i--){
            for(int j=1;j<=target;j++){
                bool first = 0;
                if(j-nums[i] >= 0)
                    first = prev[j-nums[i]];
                bool second = prev[j];

                curr[j] = (first || second); 
            }
            prev = curr;
        }
        return curr[target];
    }
    bool canPartition(vector<int>& nums){
        int sum = 0;
        for(int i=0;i<nums.size();i++){
            sum += nums[i];
        }
        if(sum&1){
            return false;
        }
        // vector<vector<int>> dp(nums.size()+1,vector<int>(sum/2+1,-1));
        // return solve(nums,0,sum/2,dp);
        // return solve_tab(nums,sum/2);
        return solve_tab_so(nums,sum/2);
    }
};
