class Solution {
public:
    static bool comp(string& s1,string &s2){
        return s1.size() < s2.size();
    }
    bool is_safe(string& s1,string& s2){
        if(s1.size() == s2.size()) return false;
        if(s2.size() != s1.size()+1) return false;

        int i = 0;
        int j = 0;

        while(j<s2.size()){
            if(s1[i] == s2[j]){
                i++;
                j++;
            }
            else{
                j++;
            }
        }
        if(i == s1.size() && j == s2.size()){
            return true;
        }
        return false;
    }
    int solve(vector<string>& words,int prev,int ind,vector<vector<int>>& dp){
        if(ind >= words.size()){
            return 0;
        }
        if(dp[prev+1][ind] != -1){
            return dp[prev+1][ind];
        }

        int take = 0;
        if(prev == -1 || is_safe(words[prev],words[ind])){
            take = 1+solve(words,ind,ind+1,dp);
        }
        int notTake = solve(words,prev,ind+1,dp);

        return dp[prev+1][ind] = max(take,notTake);
    }
    int longestStrChain(vector<string>& words) {
        sort(words.begin(),words.end(),comp);
        vector<vector<int>> dp(words.size()+1,vector<int>(words.size()+1,-1));
        return solve(words,-1,0,dp);
    }
};
