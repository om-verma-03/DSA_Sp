class Solution{
public:
    /*You are required to complete this method*/
    bool static comp(struct val p1,struct val p2){
        if(p1.second==p2.second)

          return p1.first<p2.first;

          return p1.second<p2.second;

    }
    int solve(struct val p[],int ind,int n,int prev,vector<int>& dp){
        if(ind >= n){
            return 0;
        }
        if(dp[ind] != -1){
            return dp[ind];
        }
        
        //Include
        int include = 0;
        if(p[ind].first > p[prev].second || prev == -1){
            include =1 + solve(p,ind+1,n,ind,dp);
        }
        int exclude = solve(p,ind+1,n,prev,dp);
        
        return dp[ind] = max(include,exclude);
    }
    int maxChainLen(struct val p[],int n){
        vector<int> dp(n+1,-1);
        sort(p,p+n,comp);
        return solve(p,0,n,-1,dp);
    }
};
