class Solution{                                            //Approaach 1(BackTracking)
public:
    bool isPalindrome(string &str,int i,int j){
        while(i<j){
            if(str[i]!=str[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    int solve(string& str,int ind,int end,vector<vector<int>>& dp){
        if(ind >= str.size()){
            return 0;
        }
        if(isPalindrome(str,ind,end)){
            return 0;
        }
        if(dp[ind][end] != -1){
            return dp[ind][end];
        }
        
        int ans = INT_MAX;
        for(int i=ind;i<=end;i++){
            if(isPalindrome(str,ind,i)){
                ans = min(ans,1+solve(str,i+1,end,dp));
            }
        }
        return dp[ind][end] = ans;
    }
    int palindromicPartition(string str){
        vector<vector<int>> dp(str.size()+1,vector<int>(str.size()+1,-1));
        return solve(str,0,str.size()-1,dp);
    }
};

      class Solution{                                              //Approach 2(Matrix Chain Multiplication)
public:
    bool isPalindrome(string &str,int i,int j){
        while(i<j){
            if(str[i]!=str[j]){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    int solve(string& str,int ind,int end,vector<vector<int>>& dp){
        if(ind >= str.size()){
            return 0;
        }
        if(isPalindrome(str,ind,end)){
            return 0;
        }
        if(dp[ind][end] != -1){
            return dp[ind][end];
        }
        
        int ans = INT_MAX;
        for(int i=ind;i<=end;i++){
            if(isPalindrome(str,ind,i)){
              ans = min(ans,1+solve(str,ind,i,dp)+solve(str,i+1,end,dp));
            }
        }
        return dp[ind][end] = ans;
    }
    int palindromicPartition(string str){
        vector<vector<int>> dp(str.size()+1,vector<int>(str.size()+1,-1));
        return solve(str,0,str.size()-1,dp);
    }
};
