class Solution {
public:
    int solve(vector<int>& arr,map<pair<int,int>,int>& maxi,int left,int right,vector<vector<int>>& dp){
        if(left == right){
            return 0;
        }
        if(dp[left][right] != -1){
            return dp[left][right];
        }

        int ans = INT_MAX;

        for(int i=left;i<right;i++){
            ans = min(ans,maxi[{left,i}]*maxi[{i+1,right}] + solve(arr,maxi,left,i,dp) + solve(arr,maxi,i+1,right,dp));
        }
        return dp[left][right] = ans;
    }
    int solve_tab(vector<int>& arr,map<pair<int,int>,int>& maxi){
        int n = arr.size();
        //Step 1
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));

        for(int i=n-1;i>=0;i--){
            for(int j=1;j<=n-1;j++){
                if(i == j){
                    continue;
                }
                else{
                    int ans = INT_MAX;
                    for(int k=i;k<j;k++){
                        ans = min(ans,maxi[{i,k}]*maxi[{k+1,j}] + dp[i][k] + dp[k+1][j]);
                    }
                    dp[i][j] = ans;
                }
            }
        }
        return dp[0][n-1];
    }
    int mctFromLeafValues(vector<int>& arr) {
        map<pair<int,int>,int> maxi;
        vector<vector<int>> dp(arr.size()+1,vector<int>(arr.size()+1,-1));

        for(int i=0;i<arr.size();i++){
            maxi[{i,i}] = arr[i];
            for(int j=i;j<arr.size();j++){
                maxi[{i,j}] = max(maxi[{i,j-1}],arr[j]);
            }
        }

        // return solve(arr,maxi,0,arr.size()-1,dp);
        return solve_tab(arr,maxi);
    }
};
