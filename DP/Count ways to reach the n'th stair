class Solution{
    public:
    int mod = 1e9+7;
    int solve(int n,vector<int>& dp){
        if(n == 0 || n == 1){
            return 1;
        }
        if(dp[n] != -1){
            return dp[n];
        }
        
        int left = solve(n-1,dp);
        int right = solve(n-2,dp);
        
        return dp[n] = (left+right)%mod;
    }
    int solve_tab(int n){
        vector<int> dp(n+1,0);
        
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i=2;i<=n;i++){
            int left = dp[i-1];
            int right = dp[i-2];
            
            dp[i] = (left+right)%mod;
        }
        return dp[n];
    }
    int solve_tab_so(int n){
        int prev1 = 1;
        int prev2 = 1;
        int curr = 1;
        
        for(int i=2;i<=n;i++){
            int left = prev1;
            int right = prev2;
            
            curr = (left+right)%mod;
            
            prev2 = prev1;
            prev1 = curr;
        }
        return curr;
    }
    int countWays(int n){
        // vector<int> dp(n+1,-1);
        // return solve(n,dp);
        // return solve_tab(n);
        return solve_tab_so(n);
    }
};
